// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/kallydev/privacy/ent/predicate"
	"github.com/kallydev/privacy/ent/wbmodel"
)

// WBModelUpdate is the builder for updating WBModel entities.
type WBModelUpdate struct {
	config
	hooks    []Hook
	mutation *WBModelMutation
}

// Where adds a new predicate for the builder.
func (wmu *WBModelUpdate) Where(ps ...predicate.WBModel) *WBModelUpdate {
	wmu.mutation.predicates = append(wmu.mutation.predicates, ps...)
	return wmu
}

// SetWbNumber sets the uid field.
func (wmu *WBModelUpdate) SetWbNumber(i int64) *WBModelUpdate {
	wmu.mutation.ResetWbNumber()
	wmu.mutation.SetWbNumber(i)
	return wmu
}

// AddWbNumber adds i to uid.
func (wmu *WBModelUpdate) AddWbNumber(i int64) *WBModelUpdate {
	wmu.mutation.AddWbNumber(i)
	return wmu
}

// SetPhoneNumber sets the phone_number field.
func (wmu *WBModelUpdate) SetPhoneNumber(i int64) *WBModelUpdate {
	wmu.mutation.ResetPhoneNumber()
	wmu.mutation.SetPhoneNumber(i)
	return wmu
}

// AddPhoneNumber adds i to phone_number.
func (wmu *WBModelUpdate) AddPhoneNumber(i int64) *WBModelUpdate {
	wmu.mutation.AddPhoneNumber(i)
	return wmu
}

// Mutation returns the WBModelMutation object of the builder.
func (wmu *WBModelUpdate) Mutation() *WBModelMutation {
	return wmu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (wmu *WBModelUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(wmu.hooks) == 0 {
		affected, err = wmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WBModelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wmu.mutation = mutation
			affected, err = wmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wmu.hooks) - 1; i >= 0; i-- {
			mut = wmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wmu *WBModelUpdate) SaveX(ctx context.Context) int {
	affected, err := wmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wmu *WBModelUpdate) Exec(ctx context.Context) error {
	_, err := wmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wmu *WBModelUpdate) ExecX(ctx context.Context) {
	if err := wmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wmu *WBModelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   wbmodel.Table,
			Columns: wbmodel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: wbmodel.FieldID,
			},
		},
	}
	if ps := wmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wmu.mutation.WbNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: wbmodel.FieldWbNumber,
		})
	}
	if value, ok := wmu.mutation.AddedWbNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: wbmodel.FieldWbNumber,
		})
	}
	if value, ok := wmu.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: wbmodel.FieldPhoneNumber,
		})
	}
	if value, ok := wmu.mutation.AddedPhoneNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: wbmodel.FieldPhoneNumber,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wbmodel.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// WBModelUpdateOne is the builder for updating a single WBModel entity.
type WBModelUpdateOne struct {
	config
	hooks    []Hook
	mutation *WBModelMutation
}

// SetWbNumber sets the uid field.
func (wmuo *WBModelUpdateOne) SetWbNumber(i int64) *WBModelUpdateOne {
	wmuo.mutation.ResetWbNumber()
	wmuo.mutation.SetWbNumber(i)
	return wmuo
}

// AddWbNumber adds i to uid.
func (wmuo *WBModelUpdateOne) AddWbNumber(i int64) *WBModelUpdateOne {
	wmuo.mutation.AddWbNumber(i)
	return wmuo
}

// SetPhoneNumber sets the phone_number field.
func (wmuo *WBModelUpdateOne) SetPhoneNumber(i int64) *WBModelUpdateOne {
	wmuo.mutation.ResetPhoneNumber()
	wmuo.mutation.SetPhoneNumber(i)
	return wmuo
}

// AddPhoneNumber adds i to phone_number.
func (wmuo *WBModelUpdateOne) AddPhoneNumber(i int64) *WBModelUpdateOne {
	wmuo.mutation.AddPhoneNumber(i)
	return wmuo
}

// Mutation returns the WBModelMutation object of the builder.
func (wmuo *WBModelUpdateOne) Mutation() *WBModelMutation {
	return wmuo.mutation
}

// Save executes the query and returns the updated entity.
func (wmuo *WBModelUpdateOne) Save(ctx context.Context) (*WBModel, error) {
	var (
		err  error
		node *WBModel
	)
	if len(wmuo.hooks) == 0 {
		node, err = wmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WBModelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wmuo.mutation = mutation
			node, err = wmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wmuo.hooks) - 1; i >= 0; i-- {
			mut = wmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wmuo *WBModelUpdateOne) SaveX(ctx context.Context) *WBModel {
	node, err := wmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wmuo *WBModelUpdateOne) Exec(ctx context.Context) error {
	_, err := wmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wmuo *WBModelUpdateOne) ExecX(ctx context.Context) {
	if err := wmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wmuo *WBModelUpdateOne) sqlSave(ctx context.Context) (_node *WBModel, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   wbmodel.Table,
			Columns: wbmodel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: wbmodel.FieldID,
			},
		},
	}
	id, ok := wmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing WBModel.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := wmuo.mutation.WbNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: wbmodel.FieldWbNumber,
		})
	}
	if value, ok := wmuo.mutation.AddedWbNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: wbmodel.FieldWbNumber,
		})
	}
	if value, ok := wmuo.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: wbmodel.FieldPhoneNumber,
		})
	}
	if value, ok := wmuo.mutation.AddedPhoneNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: wbmodel.FieldPhoneNumber,
		})
	}
	_node = &WBModel{config: wmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, wmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wbmodel.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
